# -*- coding: utf-8 -*-
"""Copy of Capstone project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16HJPW9WdBMLvxhFFpkWR_LDvql0kOSmv

# Deteksi Penyakit pada Kulit Wajah Manusia

## Load Data
"""

!pip install -q kaggle

from google.colab import files

files.upload()

! mkdir ~/.kaggle

! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d hilmiher/face-disease

!mkdir dataset

!unzip face-disease.zip -d dataset

"""## Data Understanding"""

import os
import glob
train_path = "/content/dataset/Dataset/train/"
print("Jumlah data training: \n")
for folder in os.listdir(train_path):
        files = glob.glob(pathname = train_path + folder + '/*.jpg')
        print(f'{folder} : {len(files)}')

train_path = "/content/dataset/Dataset/validation/"
print("Jumlah data validation: \n")
for folder in os.listdir(train_path):
        files = glob.glob(pathname = train_path + folder + '/*.jpg')
        print(f'{folder} : {len(files)}')

import cv2
X_train = []
y_train = []
img_size = 100

code = {'blackhead':0, 'eksim':1, 'flek hitam':2, 'herpes':3, 'jerawat':4, 'milia':5, 'panu':6, 'rosacea':7, 'tineafasialis':8}
for folder in os.listdir(train_path):
    files = glob.glob(pathname = train_path + folder + "/*.jpg")
    for file in files:
        img = cv2.imread(file)
        img_array = cv2.resize(img , (img_size,img_size))
        X_train.append(list(img_array))
        y_train.append(code[folder])
def getcode(n) : 
    for x , y in code.items() : 
        if n == y : 
            return x

from matplotlib import pyplot as plt
import numpy as np

plt.figure(figsize=(15,15))
for n , i in enumerate(list(np.random.randint(0,len(X_train),25))) : 
    plt.subplot(5,5,n+1)
    plt.imshow(X_train[i])   
    plt.axis('off')
    plt.title(getcode(y_train[i]))

"""## Image Augmentation"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os

train_dir = os.path.join('/content/dataset/Dataset/train/')
val_dir = os.path.join('/content/dataset/Dataset/validation')

train_datagen = ImageDataGenerator(rescale=1./225,
                                   rotation_range = 20,
                                   zoom_range = 0.2,
                                   shear_range = 0.2,
                                   fill_mode = 'nearest')
val_datagen = ImageDataGenerator(rescale=1./225)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',   
)
validation_generator = train_datagen.flow_from_directory(
    val_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical', 
)

"""## Modelling

### Transfer Learning MobileNetV2
"""

import tensorflow as tf

image_size = 160
IMG_SHAPE = (image_size, image_size, 3)

base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                              include_top=False,
                                              weights='imagenet')
base_model.trainable = False

"""### Sequential Model"""

model = tf.keras.models.Sequential([
    base_model,
    tf.keras.layers.Conv2D(16, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    
    tf.keras.layers.Flatten(),
    
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),  
    tf.keras.layers.Dense(9, activation='softmax')
])

tf.keras.utils.plot_model(
    model,
    to_file="model.png",
    show_shapes=False,
    show_layer_names=True,
    rankdir="TB",
    expand_nested=False)

model.summary()

"""### Compile and Training"""

from tensorflow.keras.optimizers import RMSprop

model.compile(optimizer=RMSprop(learning_rate=1e-4),
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])

history = model.fit(train_generator,
                    validation_data = validation_generator,
                    epochs = 70,
                    verbose=1)

"""### Save Model"""

model.save('saved_model/my_model.h5')

"""### Training Result Chart"""

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']


loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc)
plt.plot(epochs, val_acc)
plt.title('Training and validation accuracy')

plt.figure()

plt.plot(epochs, loss)
plt.plot(epochs, val_loss)
plt.title('Training and validation loss')

"""## Model Testing"""

import numpy as np
import tensorflow as tf
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import cv2
from PIL import Image 


new_model = tf.keras.models.load_model('/content/my_model.h5')
labels = ['blackhead', 'eksim', 'flek hitam', 'herpes', 'jerawat', 'milia', 'panu', 'rosacea', 'tinea fasialis']

def preprocess(img,input_size):
    nimg = img.convert('RGB').resize(input_size, resample= 0)
    img_arr = (np.array(nimg))/255
    return img_arr
def reshape(imgs_arr):
    return np.stack(imgs_arr, axis=0)
from google.colab import files

im = files.upload()
for fn in im.keys():
  input_size = (160,160)
  path = fn 
  img = image.load_img(path, input_size)
  X = preprocess(img,input_size)
  X = reshape([X])
  y = new_model.predict(X)
  akurasi = np.max(y)*100
  im = Image.open(fn)
  pyplot.imshow(im)
  print( labels[np.argmax(y)], akurasi)